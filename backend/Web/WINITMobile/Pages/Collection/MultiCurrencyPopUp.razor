@using Winit.Modules.CollectionModule.Model.Classes
@using Winit.Modules.CollectionModule.Model.Interfaces
@inject Winit.Modules.CollectionModule.BL.Interfaces.ICreatePaymentViewModel _createPaymentAppViewModel
@inherits WINITMobile.Pages.Base.BaseComponentBase
@if (IsShow)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;z-index:20">
        <div style="margin-top:15%">
            <div class="modal-content" style="z-index:25;height: 462px;">
                <div class="modal-header head_cls">
                    <div style="font-size: 14px;font-weight: 600;">
                        @Localizer["enter_amount_currency_wise"]
                    </div>
                    <button type="button" class="close" @onclick="Close">
                        <span style="color:black;font-size: 25px;font-weight: 400;">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <div class="blue_cls">
                        <div class="d-flex flex-row hdr_cls">
                            <p class="p_cls">@Localizer["currency"]</p>
                            <p class="p_cls">@Localizer["rate"]</p>
                            <p class="p_cls">@Localizer["amount"]</p>
                            <div class="d-flex flex-column p_cls currency_cls">
                                <p>@Localizer["amount"]</p>
                                <p style="@(IsReadOnly ? "margin-top: -10px" :"margin-top: -18px")">(INR)</p>
                            </div>
                        </div>
                    </div>
                    <div style="margin-left: -20px;height: 225px;">
                        @if (_currencyCls.Count != 0)
                        {
                            @foreach (var item in _currencyCls)
                            {
                                <div style="@(_currencyCls.Last() == item ? "margin-left: 4px;" : "")">
                                    <div class="d-flex flex-row body_cls">
                                        <div class="d-flex flex-row gap_cls">
                                            <div class="p_cls">@item.FromCurrencyUID</div>
                                            <div class="p_cls" style="@(_currencyCls.Last() == item ? "margin-left: 14px;" : "")">@item.Rate</div>
                                        </div>
                                        <div class="d-flex flex-row" style="@(_currencyCls.Last() == item ? "margin-left: -4px;" : "")">
                                            <div class="p_cls">
                                                @if (IsReadOnly)
                                                {
                                                    <label class="amt_cls" style="border:0px;">@item.CurrencyAmount_Temp</label>
                                                }
                                                else
                                                {
                                                    <input type="number" @bind="@item.CurrencyAmount_Temp" class="amt_cls" @oninput="@(async e => await AmountCalculation(e, "CurrencyAmount", item))">
                                                }
                                            </div>
                                            <div class="p_cls">
                                                @if (IsReadOnly)
                                                {
                                                    <label class="amtcur_cls" style="border:0px;">@item.ConvertedAmount_Temp</label>
                                                }
                                                else
                                                {
                                                    <input type="number" @bind="@item.ConvertedAmount_Temp" class="amtcur_cls">
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="margin-bottom:23px;"></div>
                            }
                        }
                        else
                        {
                            <div style="margin-bottom: 3px;"></div>
                            <div class="container">
                                <div class="row">
                                    <div>
                                        <div class="card-title" style="color:red;margin-left: 75px;margin-top: 70px;">
                                            @Localizer["no_records_available"]
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="down_cls">
                        <div style="margin-top: 10px;margin-left: 15px;">
                            <div class="d-flex flex-row" style="gap:90px;">
                                <div class="d-flex flex-column">
                                    <p class="down_header_cls"> @(IsReadOnly ? "" : "Invoice Total")</p>
                                    <p class="down_data_cls">@(IsReadOnly ? "" : Invoice)<span class="down_header_cls">@(IsReadOnly ? "" : "(USD)")</span></p>
                                </div>
                                <div class="d-flex flex-column">
                                    <p class="down_header_cls">@Localizer["total_collected_amount"]</p>
                                    <p class="down_data_cls">@_currencyCls.Sum(p => p.ConvertedAmount_Temp)<span class="down_header_cls">(USD)</span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="width: 346px;">
                    <div>
                        <button class="cancel_cls" @onclick="CancelBtn">
                            @Localizer["cancel"]
                        </button>
                        <button class="ok_cls" @onclick="OkCloseBtn">
                            @Localizer["ok"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsShow { get; set; } = false;
    [Parameter] public EventCallback Closebtn { get; set; }
    [Parameter] public List<IExchangeRate> _currencyCls { get; set; } = new List<IExchangeRate>();
    public static List<IExchangeRate> _currencyClsDisplay { get; set; } = new List<IExchangeRate>();
    [Parameter] public decimal Invoice { get; set; } = 0;
    public decimal InvoiceCopy { get; set; } = 0;
    public decimal Invoice_Copy { get; set; } = 0;
    [Parameter] public decimal Collected { get; set; } = 0;
    [Parameter] public decimal Remaining { get; set; } = 0;
    [Parameter] public EventCallback<decimal> OnSubmitAmount { get; set; }
    [Parameter] public EventCallback<Dictionary<string, List<IExchangeRate>>> OnSubmitList { get; set; }
    [Parameter] public string PaymentMode { get; set; } = "";
    public decimal CollectedAmount { get; set; } = 0;
    public static Dictionary<string, List<IExchangeRate>> StateManagement = new Dictionary<string, List<IExchangeRate>>();
    public List<IExchangeRate> CurrencyRateRecords { get; set; } = new List<IExchangeRate>();
    [Parameter] public bool IsReadOnly { get; set; } = false;
    public decimal maxLimit = 0;
    public decimal minLimit = 0;
    public string DefaultCurrency { get; set; } = "";
    public decimal MinMaxDiff = 0;

    public async Task OnInit(string PaymentMode)
    {
        if (!IsReadOnly)
        {
            if (StateManagement.ContainsKey(PaymentMode))
            {
                _currencyCls = StateManagement[PaymentMode];
            }
            else
            {
                _currencyCls = await _createPaymentAppViewModel.GetCurrencyRateRecords("");
            }
        }
        foreach (var data in _currencyCls)
        {
            data.CurrencyAmount_Temp = data.CurrencyAmount;
            data.ConvertedAmount_Temp = data.ConvertedAmount;
        }
        //IsShow = true;
        await Task.CompletedTask;
        StateHasChanged();
    }

    public async Task Close()
    {
        try
        {
            await Closebtn.InvokeAsync();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    public async Task CancelBtn()
    {
        try
        {
            await Closebtn.InvokeAsync();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }
    public async Task OkCloseBtn()
    {
        try
        {
            if (!IsReadOnly)
            {
                if (!await RoundOffCalculation(_currencyCls))
                {
                    return;
                }
                await ManageCalculationInParent();
                _dataManager.SetData("MultiCurrencyDetails", StateManagement);
            }

            await Closebtn.InvokeAsync();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }
    public async Task AmountCalculation(ChangeEventArgs e, string Propertyname, IExchangeRate exchangeRate)
    {
        try
        {
            switch (Propertyname)
            {
                case "CurrencyAmount":
                    exchangeRate.ConvertedAmount_Temp = Convert.ToDecimal(string.IsNullOrEmpty(e.Value.ToString()) ? 0 : e.Value) * exchangeRate.Rate;
                    exchangeRate.CurrencyAmount_Temp = Convert.ToDecimal(string.IsNullOrEmpty(e.Value.ToString()) ? 0 : e.Value);
                    exchangeRate.OriginalAmount = exchangeRate.Rate * exchangeRate.CurrencyAmount_Temp;
                    break;
                default:
                    break;
            }
            await UpdateCollectedAmount(exchangeRate);
            StateHasChanged();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }
    public async Task ManageCalculationInParent()
    {
        try
        {
            foreach (var data in _currencyCls)
            {
                data.CurrencyAmount = data.CurrencyAmount_Temp;
                data.ConvertedAmount = data.ConvertedAmount_Temp;
                data.OriginalAmount = data.Rate * data.CurrencyAmount_Temp;
            }
            if (StateManagement.ContainsKey(PaymentMode))
            {
                // If the key exists, update the list with the new value
                StateManagement[PaymentMode] = _currencyCls;
            }
            else
            {
                // If the key doesn't exist, insert the key-value pair into the dictionary
                StateManagement[PaymentMode] = _currencyCls;
            }
            decimal Amount = 0;
            foreach (var data in StateManagement)
            {
                Amount += data.Value.Sum(p => p.ConvertedAmount_Temp);
            }
            await OnSubmitAmount.InvokeAsync(Amount);
            await OnSubmitList.InvokeAsync(StateManagement);
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }
    public async Task UpdateCollectedAmount(IExchangeRate exchangeRate)
    {
        try
        {
            CollectedAmount = _currencyCls.Sum(p => p.ConvertedAmount_Temp);
            _currencyCls.FirstOrDefault().TotalAmount_Temp = CollectedAmount;
            StateHasChanged();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    public async Task<bool> RoundOffCalculation(List<IExchangeRate> exchangeRate)
    {
        try
        {
            if (exchangeRate.Count != 0)
            {
                foreach (var data in exchangeRate)
                {
                    var matchedCurrency = _appUser.OrgCurrencyList.FirstOrDefault(p => p.UID == data.FromCurrencyUID);
                    if (matchedCurrency != null)
                    {
                        maxLimit = matchedCurrency.RoundOffMaxLimit;
                        minLimit = matchedCurrency.RoundOffMinLimit;
                        DefaultCurrency = matchedCurrency.UID;
                    }
                    else
                    {
                        maxLimit = 0; // or some default value
                        minLimit = 0; // or some default value
                        DefaultCurrency = string.Empty;
                    }
                    await CalculateAmount(data);
                    //commented by mahir
                    // if (DefaultCurrency == data.ToCurrencyUID)
                    // {
                    //     await _alertService.ShowErrorAlert(@Localizer["alert"], @Localizer["can_not_round_off_local_currency"]);
                    //     return false;
                    // }
                    if ((MinMaxDiff) >= minLimit && (MinMaxDiff) <= maxLimit )
                    {

                    }
                    else
                    {
                        await _alertService.ShowErrorAlert(@Localizer["alert"], @Localizer["round_off_range_should_be"] + minLimit + @Localizer["to"] + maxLimit + ".");
                        return false;
                    }
                }
            }
            await Task.CompletedTask;
            return true;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    public async Task<decimal> CalculateAmount(IExchangeRate exchangeRate)
    {
        try
        {
            MinMaxDiff = exchangeRate.OriginalAmount > exchangeRate.ConvertedAmount_Temp ?
            exchangeRate.OriginalAmount - exchangeRate.ConvertedAmount_Temp : exchangeRate.ConvertedAmount_Temp - exchangeRate.OriginalAmount;
            await Task.CompletedTask;
            return MinMaxDiff;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    public async Task ClearDictionary()
    {
        try
        {
            StateManagement.Clear();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    public async Task AdjustMultiCurrencyAmount(string Mode)
    {
        try
        {
            if (StateManagement.ContainsKey(Mode))
            {
                foreach(var record in StateManagement[Mode])
                {
                    record.ConvertedAmount = 0;
                    record.ConvertedAmount_Temp = 0;
                    record.CurrencyAmount = 0;
                    record.CurrencyAmount_Temp = 0;
                    record.OriginalAmount = 0;
                    record.OriginalAmount_Temp = 0;
                }
                decimal Amount = 0;
                foreach (var data in StateManagement)
                {
                    Amount += data.Value.Sum(p => p.ConvertedAmount_Temp);
                }
                await OnSubmitAmount.InvokeAsync(Amount);
                await OnSubmitList.InvokeAsync(StateManagement);
            }
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }
    protected override async Task OnInitializedAsync()
    {

        LoadResources(null, _languageService.SelectedCulture);

    }
}
