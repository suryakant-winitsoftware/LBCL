@page "/addLocationMappingTemplate"
@using WinIt.BreadCrum.Classes
@using WinIt.BreadCrum.Interfaces
@using Winit.Modules.Location.BL.Classes
@using Winit.Modules.Location.Model.Classes
@using Winit.Modules.Location.Model.Interfaces

@inject Winit.Modules.Location.BL.Interfaces.IAddEditLocationMappingTemplateBaseViewModel _addEditLocationMapping


<PageHeaderAndFilter IDataBreadcrumbService="DataBreadCrum" />
<div class="cls_container_div4">
    <div class="cls_section">
        <div class="cls_section_div_purchase2">
            <label class="cls_section_div_purchase2_label" for="mappingCode">Mapping Code</label>
            <input type="text" class="cls_select2_button" id="mappingCode" @bind="@_addEditLocationMapping.LocationTemplate.TemplateCode"  placeholder="Enter here" />
        </div>

        <div class="cls_section_div_purchase2">
            <label class="cls_section_div_purchase2_label" for="mappingName">Mapping Name</label>
            <input type="text" id="mappingName" @bind="@_addEditLocationMapping.LocationTemplate.TemplateName" class="cls_select2_button" placeholder="Enter here" />
        </div>

        <div class="cls_section_div_purchase2">
            <div class="cls_btn_radio">
                <input type="radio" class="cls_btn_radio_input" id="isActiveYes" @onclick="@(()=>{_addEditLocationMapping.LocationTemplate.IsActive=true;})" checked="@_addEditLocationMapping.LocationTemplate.IsActive" />
                <label class="cls_btn_radio_label" for="isActiveYes">Yes</label>
                
        </div>
            <div class="cls_btn_radio">
                <input type="radio" class="cls_btn_radio_input" id="isActiveNo" @onclick="@(()=>{_addEditLocationMapping.LocationTemplate.IsActive=true;})" checked="@(!_addEditLocationMapping.LocationTemplate.IsActive)" />
                <label class="cls_btn_radio_label" for="isActiveNo">No</label>
            </div>
        </div>

        
    </div>
    <div class="cls_container_div1 margin_top">
        <button @onclick="@(()=>_addEditLocationMapping.IsAdd=true)" class="cls_add_new_sec">Add</button>
    </div>

    <div class="cls_container_div1">
        <TableGridView DataSource="_addEditLocationMapping.LocationTemplateLineList" Columns="Columns" />

        <div class="cls_button_bottom_purchase">
            <button class="cls_button_light"> Cancel</button>
            <button class="cls_button_blue " @onclick=@(((AddEditLocationMappingTemplateWebViewModel)_addEditLocationMapping).FinalizeMapping)> Finalize</button>
            <button class="cls_button_light" @onclick=@DeleteSelectedTemplateLines> Delete Selected Items</button>
            
        </div>
    </div>


</div>

@if (_addEditLocationMapping.IsAdd)
{
    <PopUp Title="Add Product" OkbtnText="Save" CancelbtnText="Close" OnOkClick="_addEditLocationMapping.SaveMapping"
           OnCloseClick="() => { _addEditLocationMapping.IsAdd=false;}">
        <div class="cls_pop_up_style_div1">
            <div class="cls_btn_radio">
                <input type="checkbox" @bind-value="_addEditLocationMapping.IsExcluded" class="cls_btn_radio_input" />
                <label class="cls_btn_radio_label">Is Excluded</label>
            </div>
        </div>

        <div class="cls_pop_up_style_div1">
                <label class="cls_section_div_purchase2_label">Type</label>
                

                <Winit.UIComponents.Common.CustomControls.DropDown IsButtonVisible="true"
                                                                   DataSource="_addEditLocationMapping.LocationTypesForDD"
                                                                   OnSelect="_addEditLocationMapping.OnLocationTypeSelected" />
            </div>
        <div class="cls_pop_up_style_div1">
            <label class="cls_section_div_purchase2_label">
                    Value
                </label>
                <Winit.UIComponents.Common.CustomControls.DropDown IsButtonVisible="true"
                                                                   _SelectionMode="Winit.Shared.Models.Enums.SelectionMode.Multiple"
                                                                   DataSource="_addEditLocationMapping.Locations"
                                                                   OnSelect="_addEditLocationMapping.OnLocationSelected" />
            </div>

    </PopUp>
   @*  <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block; ">
        <div class="modal-dialog" style="top:20%;max-width:800px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close">
                        <span class="close" @onclick="()=> { _addEditLocationMapping.IsAdd=false;}" style="color:black; padding:10px;">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <input type="checkbox" @bind-value="_addEditLocationMapping.IsExcluded" />

                    <span>Is Excluded</span>
                    <br />

                    <div>



                        <div class="row">
                            <div class="col">
                                <label>
                                    <span>Type</span>
                                </label>

                                <Winit.UIComponents.Common.CustomControls.DropDown IsButtonVisible="true"
                                                                                   DataSource="_addEditLocationMapping.LocationTypesForDD"
                                                                                   OnSelect="_addEditLocationMapping.OnLocationTypeSelected" />
                            </div>
                            <div class="col">
                                <label>
                                    <span>Value</span>
                                </label>
                                <Winit.UIComponents.Common.CustomControls.DropDown IsButtonVisible="true"
                                                                                   _SelectionMode="Winit.Shared.Models.Enums.SelectionMode.Multiple"
                                                                                   DataSource="_addEditLocationMapping.Locations"
                                                                                   OnSelect="_addEditLocationMapping.OnLocationSelected" />
                            </div>

                        </div>




                        <br />
                        <br />
                        <div>
                        </div>
                        <br />
                        <div class="row justify-content-center">
                            <div class="col-md-6 text-center">
                                <button class="cls_add_new_sec" @onclick="_addEditLocationMapping.SaveMapping">
                                    Save
                                </button>
                            </div>
                        </div>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </div> *@
}

@code {
    protected override async Task OnInitializedAsync()
    {
        SetColumnsHeaders();
        await SetBreadCrum();
        await _addEditLocationMapping.PopulateViewModel();
    }

    Winit.UIModels.Web.Breadcrum.Interfaces.IDataService DataBreadCrum = new Winit.UIModels.Web.Breadcrum.Classes.DataServiceModel()
        {
            HeaderText = "Add/Edit Location Group Template",
            BreadcrumList = new()
             {
                 new Winit.UIModels.Web.Breadcrum.Classes.BreadCrumModel()
                 {
                     Text="Maintain User Location Mapping",
                     SlNo=1,
                     URL="UserLocationTemplate",
                     IsClickable=true
                 }, new Winit.UIModels.Web.Breadcrum.Classes.BreadCrumModel()
                 {
                     Text="Add/Edit Location Group Template",
                     SlNo=2,
                 },
             }
        };

    public async Task SetBreadCrum()
    {
        _IDataService.BreadcrumList = new List<IBreadCrum>();
        _IDataService.HeaderText = "Add/Edit Location Group Template";
        _IDataService.BreadcrumList = new()
        {
            new BreadCrumModel(){ SlNo=1,Text="Location Group Template",IsClickable=true,URL="UserLocationTemplate"},
            new BreadCrumModel(){ SlNo=1,Text="Add/Edit Location Group Template"},
        };

    }



    List<DataGridColumn> Columns;
    protected void SetColumnsHeaders()
    {
        Columns = new List<DataGridColumn>()
            {
            new()
            {
                Header="Select",
                IsButtonColumn=true,
                ButtonActions = new()
                {
                    new()
                    {
                        ButtonType=ButtonTypes.CheckBox,
                        GetValue=s=>((LocationTemplateLine)s).IsSelected,
                        Action=item=>OnTemplateLineSelected((ILocationTemplateLine)item),
                    }
                }
            },
                new(){Header="Type" ,GetValue=s=>((LocationTemplateLine)s).Type},
                new(){Header="Value" ,GetValue=s=>((LocationTemplateLine)s).Value},
                new(){Header="Is Excluded" ,GetValue=s=>CommonFunctions.GetBooleanValueInYesOrNO(((LocationTemplateLine)s).IsExcluded)},

            new()
            {
                Header="Action",
                IsButtonColumn=true,
                ButtonActions = new()
                {
                    new()
                    {
                        ButtonType=ButtonTypes.Image,
                        URL="Images/delete.png",
                         Action=item=>DeleteTemplateline((ILocationTemplateLine)item),
                    }
                }
            }
          };
    }
    protected async void DeleteTemplateline(ILocationTemplateLine locationTemplateLine)
    {
        await ((AddEditLocationMappingTemplateWebViewModel)_addEditLocationMapping).DeleteSelectedTemplateLines(locationTemplateLine);
        StateHasChanged();
    }
    protected async void DeleteSelectedTemplateLines()
    {
        await ((AddEditLocationMappingTemplateWebViewModel)_addEditLocationMapping).DeleteSelectedTemplateLines();
        StateHasChanged();
    }
    protected void OnTemplateLineSelected(ILocationTemplateLine locationTemplateLine)
    {
        int records = _addEditLocationMapping.LocationTemplateLineList.Count;
        int j = records - 1;
        for (int i = 0; i < records / 2; i++)
        {
            if (locationTemplateLine.UID == _addEditLocationMapping.LocationTemplateLineList[i].UID)
            {
                _addEditLocationMapping.LocationTemplateLineList[i].IsSelected = !_addEditLocationMapping.LocationTemplateLineList[i].IsSelected;
                break;
            }
            if (i < j && locationTemplateLine.UID == _addEditLocationMapping.LocationTemplateLineList[j].UID)
            {
                _addEditLocationMapping.LocationTemplateLineList[j].IsSelected = !_addEditLocationMapping.LocationTemplateLineList[j].IsSelected;
                break;
            }
            j--;
        }
        StateHasChanged();
    }

}
