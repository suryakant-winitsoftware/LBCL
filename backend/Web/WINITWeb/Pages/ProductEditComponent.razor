@page "/ProductEdit"

@using WinIt.Models.Customers
@inject NavigationManager NavManager
@using MudBlazor
@inject HttpClient httpClient
@using System.Net.Http.Json
@using Winit.UIModels.Common.Product;

<div>
    <h8 style="color:#003898; font-weight:bold">Maintain Product Edit</h8>
</div>
<div>
    Dashboard >> Preseller Orders Details >> View Order Details
</div>

            <div class="col-md-6 w-100">
                <!-- First Card: Customer Information -->
                <div class="card">
                    <div class="card-body">
                        <!-- Customer Name and Details -->
                        <h3>@Customer.Name</h3>


                    <div class="d-flex flex-row justify-content-between">
                        <div class="flex-item">
                               <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">
                                
                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>Customer code</h9>
                                <p class="customer-code">@Customer.Code</p>
                            </div>
                            </div>
                        <div class="flex-item">
                            <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">

                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>Channel</h9>
                                <p class="customer-value">@Customer.Value</p>
                            </div>
                        </div>
                        <div class="flex-item">
                            <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">

                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>CustomerType</h9>
                                <p class="customer-value">@Customer.CustomerType</p>
                            </div>
                        </div>
                        <div class="flex-item">
                            <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">

                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>SalesOrgainzation</h9>
                                <p class="customer-value">@Customer.SalesOrgainzation</p>
                            </div>
                        </div>
                        <div class="flex-item">
                            <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">

                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>RecievedBy</h9>
                                <p class="customer-value">@Customer.RecievedBy</p>
                            </div>
                        </div>
                        <div class="flex-item">
                            <div class="mr-2">
                                <i class="bi bi-person-circle"></i> <!-- Bootstrap icon for user profile -->
                            </div>
                            <div class="pipe-symbol mr-2">

                                <i class="bi bi-dash"></i> <!-- Bootstrap icon for a dash -->
                            </div>
                            <div class="customer-details">
                                <h9>DeliveredBy</h9>
                                <p class="customer-value">@Customer.DeliveredBy</p>
                            </div>
                        </div>
                        </div>
                        <!-- Outlet Details -->
                        <h4>Outlet Details</h4>
                <div class="d-flex flex-column">
                        <div class="d-flex flex-row justify-content-between">
                          <div>
                        <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Salesman:</h7><p>@Order.Salesman</p>
                        </div>
                        <div>
                        <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                    </div>
                        <div class="d-flex flex-row justify-content-between">
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Salesman:</h7><p>@Order.Salesman</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                    </div>
                        <div class="d-flex flex-row justify-content-between">
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Salesman:</h7><p>@Order.Salesman</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                        <div>
                            <h7>Order Number:</h7><p>@Order.Number</p>
                        </div>
                    </div>

                </div>
                </div>
                </div>
            <div class="col-md-6 w-100 mt-3">
                @if (isEditMode)
                {
                    <AddProducts />
                }
                <div>
                    <MudTable Dense="true" Hover="true" @ref="table" Items="selectedOrders">
                        <!-- Table header content -->
                        <HeaderContent>
                            <MudTh class="custom-header">OrderNumber</MudTh>
                            <MudTh class="custom-header">Salesman</MudTh>
                            <MudTh class="custom-header">Customer Name</MudTh>
                            <MudTh class="custom-header">Order Date</MudTh>
                            <MudTh class="custom-header">Delivery Date</MudTh>
                            <MudTh class="custom-header">Amount (INR)</MudTh>
                        </HeaderContent>
                        <!-- Table row template -->
                        <RowTemplate>

                            <MudTd>
                                <span @onclick="() => ToggleRowDetails(context)">@GetRowIcon(context)</span>
                                @context.OrderNumber
                            </MudTd>
                            <MudTd>@context.Salesman</MudTd>
                            <MudTd>@context.CustomerName</MudTd>
                            <MudTd>@context.OrderDate.ToShortDateString()</MudTd>
                            <MudTd>@context.DeliveryDate.ToShortDateString()</MudTd>
                            <MudTd>@context.Amount.ToString("₹0.00")</MudTd>
                        </RowTemplate>
                        <!-- Optional content for the table footer -->
                        <FooterContent>
                            <!-- ... Your footer content ... -->
                        </FooterContent>
                    </MudTable>





                    @if (expandedRowIndex.HasValue && selectedOrders != null)
                    {
                        var expandedRow = selectedOrders.FirstOrDefault(item => item.OrderNumber == expandedRowIndex.Value);
                        if (expandedRow != null)
                        {
                            <div style="background-color: #f5f5f5; margin: 15px;">
                                <MudTable Items="selectedOrders" Dense="true" Hover="true" @ref="table">
                                    <HeaderContent>
                                        <MudTh class="custom-header">
                                            OrderNumber
                                        </MudTh>
                                        <MudTh class="custom-header">Salesman</MudTh>
                                        <MudTh class="custom-header">Customer Name</MudTh>
                                        <MudTh class="custom-header">Order Date</MudTh>
                                        <MudTh class="custom-header">Delivery Date</MudTh>
                                        <MudTh class="custom-header">Amount (INR)</MudTh>

                                    </HeaderContent>
                                    <!-- Table row template -->
                                    <RowTemplate>

                                        <MudTd>@expandedRow.OrderNumber</MudTd>
                                        <MudTd><input type="text" value="@expandedRow.Salesman" /></MudTd>
                                        <MudTd><input type="text" value="@expandedRow.CustomerName" /></MudTd>
                                        <MudTd><input type="text" value="@expandedRow.OrderDate" /></MudTd>
                                        <MudTd><input type="text" value="@expandedRow.DeliveryDate" /></MudTd>
                                        <MudTd><input type="text" value="@expandedRow.Amount.ToString("₹0.00")" /></MudTd>
                                    </RowTemplate>
                                    <!-- Optional content for the table footer -->
                                    <FooterContent>
                                        <!-- ... Your footer content ... -->
                                    </FooterContent>
                                </MudTable>



                            </div>
                        }
                    }

                    <div>
                        @if (!isEditMode)
                        {
                            <button class="btn btn-primary" @onclick="ToggleEditMode">Edit</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="ApplyPromotion">Apply Promotion</button>
                        }
                        <button class="btn btn-secondary" @onclick="NavigateBack">Back</button>



                    </div>
                </div>
            </div>
          </div>

      <div/>
    <div/>


     
@code {
    private OrderData detailsData;
    private MudTable<OrderData> table;
    private bool isEditMode = false;
    private Dictionary<int, bool> expandedRows = new Dictionary<int, bool>();

    private string orderNumber;
    private List<OrderData> selectedOrders;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(NavManager.Uri);
            var query = uri.Query;
            if (!string.IsNullOrWhiteSpace(query))
            {
                var queryParams = System.Web.HttpUtility.ParseQueryString(query);
                orderNumber = (queryParams.Get("orderNumber"));
                if (int.TryParse(orderNumber, out int orderNumberInt))
                {
                    // Successfully converted to int, now you can use orderNumberInt
                    // For example, you might use it in the expandedRowIndex comparison
                    selectedOrders = OrderDataRepository.OrderDataList.Where(order => order.OrderNumber == orderNumberInt).ToList();
                }
                else
                {
                    // Handle the case where conversion failed
                    Console.WriteLine("Conversion to int failed.");
                }
                // selectedOrders = OrderDataRepository.OrderDataList.Where(order => order.OrderNumber == orderNumber).ToList();
            }
            else
            {
                Console.WriteLine("Error: No query parameters found.");
            }
        }

        catch (Exception ex)
        {
            // Handle the exception as needed
            Console.WriteLine($"Error loading data: {ex.Message}");
        }


        //if (!string.IsNullOrEmpty(OrderNumber))
        //{
        //    selectedOrders = orderDataList.Where(order => order.OrderNumber == OrderNumber).ToList();
        //}
        //else
        //{
        //    selectedOrders = new List<OrderData>();
        //}
    }

    private int? expandedRowIndex = null;

    //private void ToggleRowDetails(StoreDataModel context)
    //{
    //    if (expandedRowIndex.HasValue && expandedRowIndex.Value == context.Id)
    //    {
    //        expandedRowIndex = null;
    //    }
    //    else
    //    {
    //        expandedRowIndex = context.Id;
    //    }
    //}

    private bool IsRowExpanded(OrderData context)
    {
        return expandedRows.ContainsKey(context.OrderNumber) && expandedRows[context.OrderNumber];
    }
    //private string GetRowIcon(StoreDataModel context)
    //{
    //    return expandedRowIndex.HasValue && expandedRowIndex.Value == context.Id ? "-" : "+";
    //}

    private string GetRowIcon(OrderData context)
    {
        return isEditMode ? "+" : (expandedRowIndex.HasValue && expandedRowIndex.Value == context.OrderNumber ? "-" : "");
    }

    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
        expandedRows.Clear();
        if (!isEditMode)
        {
            expandedRowIndex = null; // Reset expanded row when leaving edit mode
        }
    }

    private void ApplyPromotion()
    {
        NavManager.NavigateTo("/Promotions");
    }


    private void ToggleRowDetails(OrderData context)
    {
        if (expandedRowIndex.HasValue && expandedRowIndex.Value == context.OrderNumber)
        {
            expandedRowIndex = null;
            expandedRows[context.OrderNumber] = false; // Update the dictionary to indicate it's not expanded
        }
        else
        {
            expandedRowIndex = context.OrderNumber;
            expandedRows[context.OrderNumber] = true; // Update the dictionary to indicate it's expanded
        }
    }

    private void NavigateBack()
    {
        @if (!isEditMode)
        {

            // Implement the logic to navigate back to the "MaintainProduct" page
            NavManager.NavigateTo("/");

        }
        else
        {
            // Toggle edit mode and clear expanded rows
            ToggleEditMode();
        }
    }

            // Sample data placeholders
            private CustomerInfo Customer { get; set; } = new CustomerInfo { Name = "John Doe", Code = "C123", Value = "Small B Traditional", CustomerType = "Cash", SalesOrgainzation = "Small Business", RecievedBy = "", DeliveredBy = "", };
            private OutletInfo Order { get; set; } = new OutletInfo
        {
            Number = "O123",
            Salesman = "Malayam singh",
            OrderDate = DateTime.Now,
            OrderType = "Preseller Order",
            OrderStatus = "Finalize"
        ,
            CurencyCode = "INR"
        ,
            TotalAmount = "66225"
        ,
            DiscountAmount = "0.00"
        ,
            NetAmount = "622.3"
        ,
            FreeNote = "Online"
        ,
            ReferenceCode = "Online"
        ,
            LPODATE = DateTime.Now
        ,
            DeliveryDate = DateTime.Now
        };

            // You can define CustomerInfo and OutletInfo classes to represent your data
            private class CustomerInfo
            {
                public string Name { get; set; }
                public string Code { get; set; }
                public string Value { get; set; }
                public string CustomerType { get; set; }
                public string SalesOrgainzation { get; set; }
                public string RecievedBy { get; set; }
                public string DeliveredBy { get; set; }
            }

            private class OutletInfo
            {
                public string Number { get; set; }
                public string Salesman { get; set; }
                public DateTime OrderDate { get; set; }
                public string OrderType { get; set; }
                public string OrderStatus { get; set; }
                public string CurencyCode { get; set; }
                public string TotalAmount { get; set; }
                public string DiscountAmount { get; set; }
                public string NetAmount { get; set; }
                public string FreeNote { get; set; }
                public string ReferenceCode { get; set; }
                public DateTime LPODATE { get; set; }
                public DateTime DeliveryDate { get; set; }

            }
}

<style>
    .custom-header {
        background-color: #003898;
        color: white !important;
    }
</style>