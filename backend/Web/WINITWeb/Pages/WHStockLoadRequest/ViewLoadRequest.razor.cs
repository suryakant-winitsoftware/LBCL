using Microsoft.AspNetCore.Components;
using Winit.Modules.Base.BL.Helper.Classes;
using Winit.Modules.Base.BL.Helper.Interfaces;
using Winit.Modules.WHStock.Model.Classes;
using Winit.Modules.WHStock.Model.Interfaces;
using Winit.Shared.Models.Common;
using Winit.Modules.Common.BL;
using Winit.Shared.Models.Enums;
using Winit.Modules.WHStock.BL.Classes;
using Nest;
using Newtonsoft.Json;
using Winit.UIModels.Common.Filter;
using Winit.Shared.Models.Constants;
using System.Globalization;
using System.Resources;
using Winit.UIModels.Web.Breadcrum.Interfaces;
using Winit.UIModels.Web.Breadcrum.Classes;

using Winit.UIComponents.Common.Language;

namespace WinIt.Pages.WHStockLoadRequest
{
    public partial class ViewLoadRequest
    {
        [CascadingParameter]
        public EventCallback<IDataService> CallbackService { get; set; }
        bool BtnRoute = false;
        string ActiveTab = StockRequestStatus.Draft;
        string Remarks = "Autogenerated"; 
        public List<WHStockRequestItemViewUI> WHStockRequestItemViewUIs = new List<WHStockRequestItemViewUI> { new WHStockRequestItemViewUI() };
        public List<WHStockRequestItemViewUI> ActiveTabList = new List<WHStockRequestItemViewUI> { new WHStockRequestItemViewUI() };
        public string OrgUID = Winit.Modules.Base.Model.CommonConstant.ORGUID != null ? Winit.Modules.Base.Model.CommonConstant.ORGUID : "FR001";

        List<DataGridColumn> LoadRequestColumns;
        SelectionManager SelectedTab;


        public List<ISelectionItem> TabSelectionItems = new List<ISelectionItem>
 {
  new SelectionItem{ Label=StockRequestStatus.Draft, Code=StockRequestStatus.Draft, UID="1"},
 new SelectionItem{ Label=StockRequestStatus.Requested, Code=StockRequestStatus.Requested, UID="2"},
 new SelectionItem{ Label=StockRequestStatus.Approved, Code=StockRequestStatus.Approved, UID="3"},
 new SelectionItem{ Label=StockRequestStatus.Processed, Code=StockRequestStatus.Processed, UID="4"},
 new SelectionItem{ Label=StockRequestStatus.Collected, Code=StockRequestStatus.Collected, UID="5"},
  new SelectionItem{ Label=StockRequestStatus.Rejected, Code=StockRequestStatus.Rejected, UID="5"},
 };

        public async Task SetHeaderName()
        {
            //_IDataService.BreadcrumList = new();


            //_IDataService.BreadcrumList.Add(new BreadCrum.Classes.BreadCrumModel() { SlNo = 1, Text = @Localizer["view_stock_request"], IsClickable = false });
            //_IDataService.HeaderText = @Localizer["view_stock_request"];
            //await CallbackService.InvokeAsync(_IDataService);
        }
        IDataService dataService = new DataServiceModel()
        {
            
            BreadcrumList = new List<IBreadCrum>()
            {
               
            }
        };
        protected override async Task OnInitializedAsync()
        {
            dataService.HeaderText=@Localizer["view_stock_request"];
            dataService.BreadcrumList.Add(new BreadCrumModel() { SlNo = 1, Text = @Localizer["view_stock_request"], IsClickable = false });
            _LoadRequestView.DisplayWHStockRequestItemView = new List<IWHStockRequestItemViewUI>();
            _loadingService.ShowLoading("Loading Load Request");
            LoadResources(null, _languageService.SelectedCulture);
            GridColumns();
            await Task.Run(async () =>
            {
                try
                {
                    await _LoadRequestView.GetVehicleDropDown();
                    await _LoadRequestView.GetRequestFromDropDown();
                    await SetViewState();
                    SetVariales();
                    await SetHeaderName();
                    StateHasChanged();
                    InvokeAsync(() =>
                    {
                        _loadingService.HideLoading();


                        StateHasChanged(); // Ensure UI reflects changes
                    });




                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            });

        }
       
        public async Task SetViewState()
        {
            await _LoadRequestView.PopulateViewModel(ActiveTab);
            await _LoadRequestView.GetRoutesByOrgUID(OrgUID);
            FilterInitialized();
            SetSerialNumber();
        }
        public void SetSerialNumber()
        {
            for (int i = 0; i < _LoadRequestView.DisplayWHStockRequestItemView.Count; i++)
            {
                _LoadRequestView.DisplayWHStockRequestItemView[i].SerialNo = i + 1;

            }
        }
        public void SetVariales()
        {
            SelectedTab = new SelectionManager(TabSelectionItems, SelectionMode.Single);
            TabSelectionItems[0].IsSelected = ActiveTab == StockRequestStatus.Draft;
        }
        
        protected override void OnInitialized()
        {
            LoadResources(null, _languageService.SelectedCulture);
            //GridColumns();
            base.OnInitialized();
        }

        public void GridColumns()
        {
            LoadRequestColumns = new List<DataGridColumn>
            {
                new DataGridColumn { Header = @Localizer["sl_n0"], GetValue = s => ((WHStockRequestItemViewUI)s).SerialNo, IsSortable = false, SortField = "Code" },
                new DataGridColumn { Header = @Localizer["request_code"], GetValue = s => ((WHStockRequestItemViewUI)s).RequestCode, IsSortable = false, SortField = "Code" },
                new DataGridColumn { Header = @Localizer["route"], GetValue = s => ((WHStockRequestItemViewUI)s).RouteName, IsSortable = false, SortField = "Code" },
                new DataGridColumn { Header = @Localizer["type"], GetValue = s => ((WHStockRequestItemViewUI)s).RequestType, IsSortable = true, SortField = "Name" },
                new DataGridColumn { Header = @Localizer["request_from"], GetValue = s => ((WHStockRequestItemViewUI)s).SourceCode, IsSortable = true, SortField = "Name" },
                new DataGridColumn { Header = @Localizer["transfer_to"], GetValue = s => ((WHStockRequestItemViewUI)s).TargetCode, IsSortable = false, SortField = "Code" },
                new DataGridColumn { Header = @Localizer["request_date"], GetValue = s => ((WHStockRequestItemViewUI)s).ModifiedTime.ToString("dd MMM, yyyy"), IsSortable = false, SortField = "Code" },
                new DataGridColumn { Header = @Localizer["required_by_date"], GetValue = s => ((WHStockRequestItemViewUI)s).RequiredByDate.ToString("dd MMM, yyyy"), IsSortable = false, SortField = "Code" },
                new DataGridColumn
                {
                    Header =  @Localizer["actions"],
                    IsButtonColumn = true,

                    ButtonActions = new List<ButtonAction>
                    {

                        new ButtonAction
                        {

                            ButtonType = ButtonTypes.Image,
                            URL = "https://qa-fonterra.winitsoftware.com/assets/Images/edit.png",
                            Action = item => EditLoadRequestItems((WHStockRequestItemViewUI)item),
                             IsVisible = ActiveTab == StockRequestStatus.Processed || ActiveTab == StockRequestStatus.Rejected ? false:true
                        },
                        new ButtonAction
                        {
                            ButtonType = ButtonTypes.Image,
                            URL = "https://qa-fonterra.winitsoftware.com/assets/Images/delete.png",
                            Action = item => DeleteLoadRequestItems((WHStockRequestItemViewUI)item),
                             IsVisible = ActiveTab == StockRequestStatus.Draft ? true:false
                        },
                        new ButtonAction
                        {
                            ButtonType = ButtonTypes.Image,
                            URL = "https://qa-fonterra.winitsoftware.com/assets/Images/view.png",
                            Action = item => ViewLoadRequestItems((WHStockRequestItemViewUI)item),
                             IsVisible = ActiveTab == StockRequestStatus.Processed || ActiveTab == StockRequestStatus.Rejected ? true:false
                        }

                    }
                }

            };
        }
        private void EditLoadRequestItems(WHStockRequestItemViewUI loadRequestItem)
        {
            var uid = loadRequestItem.UID;

            NavManager.NavigateTo($"addeditloadrequest?UID={uid}");
        }

        private async void DeleteLoadRequestItems(WHStockRequestItemViewUI loadRequestItem)
        {

            bool result = await _alertService.ShowConfirmationReturnType("", $"{@Localizer["are_you_sure_you_want_to_delete?"]}", @Localizer["yes"], @Localizer["no"]);
            if (result)
            {
                var ListForDeleteRequest = new WHRequestTempleteModel();
                WHStockRequest wHStockRequest = new WHStockRequest
                {
                    UID = loadRequestItem.UID,
                    ActionType = Winit.Shared.Models.Enums.ActionType.Delete

                };
                ListForDeleteRequest.WHStockRequest = wHStockRequest;


                if (await _LoadRequestView.CUDWHStock(ListForDeleteRequest))
                {
                    _tost.Add(@Localizer["skus"], @Localizer["stock_deleted_successfully"], Winit.UIComponents.SnackBar.Enum.Severity.Success);
                    await SetViewState();
                    StateHasChanged();

                }
            }

        }
        private void ViewLoadRequestItems(WHStockRequestItemViewUI loadRequestItem)
        {
            var uid = loadRequestItem.UID;

            NavManager.NavigateTo($"addeditloadrequest?UID={uid}");
        }
        public async void OnTabSelect(ISelectionItem selectionItem)
        {

            if (!selectionItem.IsSelected)
            {

                _loadingService.ShowLoading("Loading Load Request");
                await Task.Run(async () =>
                {
                    try
                    {
                        SelectedTab.Select(selectionItem);
                        ActiveTab = selectionItem.Code;
                        WHStockRequestItemViewUIs = new List<WHStockRequestItemViewUI>();
                        await ButtonVisibility();
                        await SetViewState();


                        GridColumns();
                        StateHasChanged();
                        InvokeAsync(() =>
                        {
                            _loadingService.HideLoading();
                        });

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                    }
                });


            }
        }

        private async void GoToLoadRequestPage(RequestType loadType)
        {
            string requestType = loadType.ToString();
            
            //_LoadRequestView.RouteListForSelection?.ForEach(item => item.IsSelected = false);
            if (loadType == RequestType.Load)
            {
               
                NavManager.NavigateTo($"addeditloadrequest?RequestType={requestType}");


            }
            else
            {
               
                NavManager.NavigateTo($"addeditunloadrequest?RequestType={requestType}");
            }
        }
    
        public async Task ButtonVisibility()
        {

        }


        // Filter Logic

        private Winit.UIComponents.Web.Filter.Filter filterRef;
        public List<FilterModel> ColumnsForFilter;
        private bool showFilterComponent = false;
        public async void ShowFilter()
        {

            filterRef.ToggleFilter();
        }

        public void FilterInitialized()
        {
            List<ISelectionItem> TempletateDDLValues = Winit.Shared.CommonUtilities.Common.CommonFunctions.ConvertToSelectionItems(_LoadRequestView.RouteList, new List<string> { "Code", "Code", "Name" });

            ColumnsForFilter = new List<FilterModel>
            {
                 new FilterModel { FilterType = FilterConst.TextBox, Label =@Localizer["reuquest_code"] ,ColumnName = LoadRequestConst.RequestCode},
                 new FilterModel { FilterType = FilterConst.DropDown, DropDownValues=TempletateDDLValues, Label = @Localizer["route"],ColumnName = LoadRequestConst.RouteCode,SelectionMode=SelectionMode.Multiple},
                 new FilterModel { FilterType = FilterConst.DropDown, DropDownValues = LoadList, Label =@Localizer["type"], ColumnName = LoadRequestConst.RequestType, SelectionMode = SelectionMode.Multiple },
                 new FilterModel { FilterType = FilterConst.DropDown, DropDownValues =  _LoadRequestView.DisplayRequestFromDDL, Label =@Localizer["request_from"] , ColumnName = LoadRequestConst.RequestFrom, SelectionMode = SelectionMode.Multiple },
                 new FilterModel { FilterType = FilterConst.DropDown, DropDownValues = _LoadRequestView.DisplayRequestToDDL, Label = @Localizer["transfer_to"], ColumnName = LoadRequestConst.TransferTo, SelectionMode = SelectionMode.Multiple },
                 new FilterModel { FilterType = FilterConst.Date, Label = @Localizer["request_date"], ColumnName = LoadRequestConst.RequestDate},
                 new FilterModel { FilterType = FilterConst.Date, Label = @Localizer["required_by_date"], ColumnName = LoadRequestConst.RequiredByDate},

            };
            showFilterComponent = true;
        }

        private async Task OnFilterApply(Dictionary<string, string> filterCriterias)
        {
            if (filterCriterias == null)
                return;

            List<FilterCriteria> criteriaList = filterCriterias
                .Where(pair => !string.IsNullOrEmpty(pair.Value)) // Exclude entries with empty values
                .Select(pair =>
                {
                    if (pair.Key == LoadRequestConst.RequestCode)
                    {
                        return new FilterCriteria(pair.Key, pair.Value, FilterType.Like);
                    }
                    else if (pair.Key == LoadRequestConst.RequestDate || pair.Key == LoadRequestConst.RequiredByDate)
                    {
                        string inputDateStr = pair.Value; // Assuming pair.Value contains the date string

                        DateTime inputDate = DateTime.ParseExact(inputDateStr, "dd/MM/yyyy", null);

                        // Format the DateTime object to the desired string format
                       // string outputDateStr = inputDate.ToString("yyyy/MM/dd");

                        // Create a new FilterCriteria object with the formatted date string
                        return new FilterCriteria(pair.Key, inputDate, FilterType.Equal);
                    }

                    else
                    {
                        var values = pair.Value.Split(',').Select(value => value.Trim()).ToArray();

                        return new FilterCriteria(pair.Key, values, FilterType.In);
                    }
                    

                }).ToList();

            await _LoadRequestView.ApplyFilter(criteriaList,ActiveTab);
        }
    

    public List<ISelectionItem> LoadList { get; set; } = new List<ISelectionItem>
    {
        new SelectionItem
        {
            UID = "Load",
            Code = "Load",
            Label = "Load",
            IsSelected = false
        },
        new SelectionItem
        {
            UID = "Unload",
            Code = "Unload",
            Label = "Unload",
            IsSelected = false
        }
    };
    }
}
