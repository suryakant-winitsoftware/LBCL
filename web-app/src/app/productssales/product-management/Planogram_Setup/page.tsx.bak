'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/components/ui/use-toast';
import {
  Plus,
  Search,
  Edit,
  Trash2,
  MoreVertical,
  Download,
  Upload,
  Filter,
  RefreshCw,
  Eye,
  Copy,
  Archive,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  LayoutGrid,
  List,
  X,
  Image as ImageIcon,
} from 'lucide-react';
import planogramService, { PlanogramSetup, PlanogramCategory } from '@/services/planogramService';
import CreatePlanogramDialog from '@/components/planogram/CreatePlanogramDialog';
import { Skeleton } from '@/components/ui/skeleton';
import { cn } from '@/lib/utils';

export default function PlanogramSetupPage() {
  // Router hook
  const router = useRouter();
  
  // Toast hook
  const { toast } = useToast();
  
  // State management
  const [setups, setSetups] = useState<PlanogramSetup[]>([]);
  const [categories, setCategories] = useState<PlanogramCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');
  const [selectedSetups, setSelectedSetups] = useState<string[]>([]);
  
  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(1);
  const [totalRecords, setTotalRecords] = useState(0);
  
  // Dialog states
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isBulkDeleteDialogOpen, setIsBulkDeleteDialogOpen] = useState(false);
  const [isImageDialogOpen, setIsImageDialogOpen] = useState(false);
  const [selectedSetup, setSelectedSetup] = useState<PlanogramSetup | null>(null);
  
  // Form state
  const [formData, setFormData] = useState<PlanogramSetup>({
    categoryCode: '',
    shareOfShelfCm: 100,
    selectionType: 'Category',
    selectionValue: '',
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  
  // Image upload state
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [planogramImages, setPlanogramImages] = useState<any[]>([]);

  // Load data on component mount
  useEffect(() => {
    loadData();
    loadCategories();
  }, [currentPage, pageSize, selectedCategory]);

  // Load planogram setups
  const loadData = async () => {
    try {
      setLoading(true);
      const searchRequest = {
        searchText: searchTerm,
        categoryCodes: selectedCategory !== 'all' ? [selectedCategory] : undefined,
        pageNumber: currentPage,
        pageSize: pageSize,
      };
      
      console.log('Search request:', searchRequest);
      let response;
      
      // Try search first, fallback to getAll if search fails
      try {
        response = await planogramService.searchPlanogramSetups(searchRequest);
      } catch (searchError) {
        console.log('Search failed, trying getAllPlanogramSetups:', searchError);
        response = await planogramService.getAllPlanogramSetups(currentPage, pageSize);
      }
      
      console.log('API response:', response);
      
      // Handle the actual API response structure
      // API returns: {Data: {totalCount, pageNumber, pageSize, totalPages, data: [...]}, StatusCode: 200, IsSuccess: true}
      let setupsData = [];
      let totalPages = 1;
      let totalCount = 0;
      
      if (response?.Data) {
        // Search API returns nested structure
        if (response.Data.data && Array.isArray(response.Data.data)) {
          setupsData = response.Data.data;
          totalPages = response.Data.totalPages || 1;
          totalCount = response.Data.totalCount || 0;
        }
        // GetAll API returns direct array
        else if (Array.isArray(response.Data)) {
          setupsData = response.Data;
          totalPages = Math.ceil(setupsData.length / pageSize);
          totalCount = setupsData.length;
        }
      }
      
      console.log('Processed setupsData:', setupsData.length, 'items, Array?', Array.isArray(setupsData));
      console.log('First setup item:', setupsData[0]);
      setSetups(setupsData);
      setTotalPages(totalPages);
      setTotalRecords(totalCount);
    } catch (error) {
      console.error('Error loading planogram setups:', error);
      setSetups([]);
      setTotalPages(1);
      setTotalRecords(0);
      toast({
        title: 'Error',
        description: 'Failed to load planogram setups. Check console for details.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Load categories
  const loadCategories = async () => {
    try {
      const response = await planogramService.getPlanogramCategories();
      console.log('Categories response:', response);
      
      // Handle the actual API response structure
      // API returns: {Data: [], StatusCode: 200, IsSuccess: true}
      if (response?.Data && Array.isArray(response.Data)) {
        setCategories(response.Data);
      } else {
        setCategories([]);
      }
    } catch (error) {
      console.error('Error loading categories:', error);
      setCategories([]);
      toast({
        title: 'Warning',
        description: 'Failed to load categories',
        variant: 'destructive',
      });
    }
  };

  // Handle search
  const handleSearch = useCallback((value: string) => {
    setSearchTerm(value);
    setCurrentPage(1);
    if (value === '') {
      loadData();
    }
  }, []);

  const performSearch = () => {
    loadData();
  };

  // Handle create
  const handleCreate = () => {
    setFormData({
      categoryCode: '',
      shareOfShelfCm: 100,
      selectionType: 'Category',
      selectionValue: '',
    });
    setFormErrors({});
  };

  // Handle edit
  const handleEdit = (setup: PlanogramSetup) => {
    setSelectedSetup(setup);
    setFormData(setup);
    setFormErrors({});
    setIsEditDialogOpen(true);
  };

  // Handle delete
  const handleDelete = (setup: PlanogramSetup) => {
    setSelectedSetup(setup);
    setIsDeleteDialogOpen(true);
  };

  // Handle bulk delete
  const handleBulkDelete = () => {
    if (selectedSetups.length === 0) {
      toast({
        title: 'No items selected',
        description: 'Please select items to delete',
        variant: 'destructive',
      });
      return;
    }
    setIsBulkDeleteDialogOpen(true);
  };

  // Validate form
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!formData.categoryCode) {
      errors.categoryCode = 'Category code is required';
    }
    if (!formData.selectionValue) {
      errors.selectionValue = 'Selection value is required';
    }
    if (formData.shareOfShelfCm && (formData.shareOfShelfCm < 0 || formData.shareOfShelfCm > 1000)) {
      errors.shareOfShelfCm = 'Share of shelf must be between 0 and 1000';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Submit create
  const submitCreate = async () => {
    if (!validateForm()) return;
    
    try {
      const response = await planogramService.createPlanogramSetup(formData);
      
      // If image is selected, upload it
      if (selectedImage && response?.Data?.UID) {
        try {
          await handleImageUpload(response.Data.UID);
        } catch (imageError) {
          console.error('Error uploading image:', imageError);
          // Don't fail the whole operation if image upload fails
        }
      }
      
      toast({
        title: 'Success',
        description: 'Planogram setup created successfully',
      });
      clearImageSelection();
      loadData();
    } catch (error) {
      console.error('Error creating planogram setup:', error);
      toast({
        title: 'Error',
        description: 'Failed to create planogram setup',
        variant: 'destructive',
      });
    }
  };

  // Submit edit
  const submitEdit = async () => {
    if (!validateForm()) return;
    
    try {
      await planogramService.updatePlanogramSetup(formData);
      toast({
        title: 'Success',
        description: 'Planogram setup updated successfully',
      });
      setIsEditDialogOpen(false);
      loadData();
    } catch (error) {
      console.error('Error updating planogram setup:', error);
      toast({
        title: 'Error',
        description: 'Failed to update planogram setup',
        variant: 'destructive',
      });
    }
  };

  // Confirm delete
  const confirmDelete = async () => {
    const setupId = selectedSetup?.UID || selectedSetup?.uid;
    if (!setupId) return;
    
    try {
      await planogramService.deletePlanogramSetup(setupId);
      toast({
        title: 'Success',
        description: 'Planogram setup deleted successfully',
      });
      setIsDeleteDialogOpen(false);
      loadData();
    } catch (error) {
      console.error('Error deleting planogram setup:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete planogram setup',
        variant: 'destructive',
      });
    }
  };

  // Confirm bulk delete
  const confirmBulkDelete = async () => {
    try {
      await planogramService.bulkDeletePlanogramSetups(selectedSetups);
      toast({
        title: 'Success',
        description: `${selectedSetups.length} planogram setups deleted successfully`,
      });
      setIsBulkDeleteDialogOpen(false);
      setSelectedSetups([]);
      loadData();
    } catch (error) {
      console.error('Error bulk deleting planogram setups:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete planogram setups',
        variant: 'destructive',
      });
    }
  };

  // Handle select all
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedSetups(Array.isArray(setups) ? setups.map(s => s.uid || s.UID || '').filter(Boolean) : []);
    } else {
      setSelectedSetups([]);
    }
  };

  // Handle select one
  const handleSelectOne = (uid: string, checked: boolean) => {
    if (checked) {
      setSelectedSetups([...selectedSetups, uid]);
    } else {
      setSelectedSetups(selectedSetups.filter(id => id !== uid));
    }
  };

  // Copy to clipboard
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: 'Copied',
      description: 'Copied to clipboard',
    });
  };

  // Image handling functions
  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        toast({
          title: 'Invalid file type',
          description: 'Please select an image file',
          variant: 'destructive',
        });
        return;
      }

      // Validate file size (5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: 'File too large',
          description: 'Please select an image smaller than 5MB',
          variant: 'destructive',
        });
        return;
      }

      setSelectedImage(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleImageUpload = async (planogramUid: string) => {
    console.log("=== handleImageUpload called ===");
    console.log("planogramUid parameter:", planogramUid);
    console.log("planogramUid type:", typeof planogramUid);
    
    if (!selectedImage) {
      console.error("No image selected for upload");
      return;
    }

    console.log("Starting direct image upload for planogram:", planogramUid);
    console.log("Selected image:", selectedImage.name, selectedImage.size, selectedImage.type);

    try {
      setUploadingImage(true);
      
      // Direct file upload - no base64 conversion needed
      console.log("Uploading file directly...");
      await planogramService.uploadPlanogramImageDirect(planogramUid, selectedImage);
      
      toast({
        title: 'Success',
        description: 'Image uploaded successfully',
      });
      
      // Clear selected image
      setSelectedImage(null);
      setImagePreview(null);
      
      // Reload images for this planogram
      loadPlanogramImages(planogramUid);
    } catch (error) {
      console.error('=== ERROR UPLOADING IMAGE ===');
      console.error('Error details:', error);
      console.error('Error message:', error instanceof Error ? error.message : String(error));
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
      
      toast({
        title: 'Upload Error',
        description: `Failed to upload image: ${error instanceof Error ? error.message : String(error)}`,
        variant: 'destructive',
      });
    } finally {
      setUploadingImage(false);
    }
  };

  const loadPlanogramImages = async (planogramUid: string) => {
    try {
      const response = await planogramService.getPlanogramImages(planogramUid);
      setPlanogramImages(response.Data || []);
    } catch (error) {
      console.error('Error loading images:', error);
    }
  };

  const handleImageDelete = async (fileUid: string, planogramUid: string) => {
    try {
      await planogramService.deletePlanogramImage(fileUid);
      toast({
        title: 'Success',
        description: 'Image deleted successfully',
      });
      loadPlanogramImages(planogramUid);
    } catch (error) {
      console.error('Error deleting image:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete image',
        variant: 'destructive',
      });
    }
  };

  const clearImageSelection = () => {
    setSelectedImage(null);
    setImagePreview(null);
  };

  const handleViewImages = async (setup: PlanogramSetup) => {
    console.log("=== handleViewImages called ===");
    console.log("Setup received:", setup);
    console.log("Setup UID:", setup.UID);
    console.log("Setup uid:", setup.uid);
    
    setSelectedSetup(setup);
    setIsImageDialogOpen(true);
    
    const setupId = setup.UID || setup.uid;
    if (setupId) {
      await loadPlanogramImages(setupId);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Page Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Planogram Setup</h1>
          <p className="text-muted-foreground">
            Manage product planogram configurations for optimal shelf space allocation
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="icon" onClick={loadData}>
            <RefreshCw className="h-4 w-4" />
          </Button>
          <CreatePlanogramDialog onSuccess={() => loadData()} />
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Setups</CardTitle>
            <LayoutGrid className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalRecords}</div>
            <p className="text-xs text-muted-foreground">Active configurations</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Categories</CardTitle>
            <Archive className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{categories.length}</div>
            <p className="text-xs text-muted-foreground">Unique categories</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avg Shelf Space</CardTitle>
            <Eye className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">100 cm</div>
            <p className="text-xs text-muted-foreground">Average allocation</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Selected Items</CardTitle>
            <List className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{selectedSetups.length}</div>
            <p className="text-xs text-muted-foreground">Ready for bulk action</p>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle>Search & Filters</CardTitle>
          <CardDescription>Find and filter planogram configurations</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                placeholder="Search by category code or value..."
                value={searchTerm}
                onChange={(e) => handleSearch(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && performSearch()}
                className="pl-10"
              />
            </div>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map((cat) => (
                  <SelectItem key={cat.categoryCode} value={cat.categoryCode}>
                    {cat.categoryName || cat.categoryCode} ({cat.setupCount})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={pageSize.toString()} onValueChange={(v) => setPageSize(parseInt(v))}>
              <SelectTrigger className="w-full md:w-[120px]">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="10">10 per page</SelectItem>
                <SelectItem value="25">25 per page</SelectItem>
                <SelectItem value="50">50 per page</SelectItem>
                <SelectItem value="100">100 per page</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex gap-2">
              <Button onClick={performSearch} variant="secondary">
                <Search className="mr-2 h-4 w-4" />
                Search
              </Button>
              {selectedSetups.length > 0 && (
                <Button onClick={handleBulkDelete} variant="destructive">
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete ({selectedSetups.length})
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Table */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Planogram Configurations</CardTitle>
              <CardDescription>
                Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, totalRecords)} of {totalRecords} entries
              </CardDescription>
            </div>
            <div className="flex gap-2">
              <Button
                variant={viewMode === 'list' ? 'default' : 'outline'}
                size="icon"
                onClick={() => setViewMode('list')}
              >
                <List className="h-4 w-4" />
              </Button>
              <Button
                variant={viewMode === 'grid' ? 'default' : 'outline'}
                size="icon"
                onClick={() => setViewMode('grid')}
              >
                <LayoutGrid className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="space-y-4">
              {[...Array(5)].map((_, i) => (
                <Skeleton key={i} className="h-16 w-full" />
              ))}
            </div>
          ) : viewMode === 'list' ? (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[50px]">
                      <Checkbox
                        checked={Array.isArray(setups) && selectedSetups.length === setups.length && setups.length > 0}
                        onCheckedChange={handleSelectAll}
                      />
                    </TableHead>
                    <TableHead>Category Code</TableHead>
                    <TableHead>Selection Type</TableHead>
                    <TableHead>Selection Value</TableHead>
                    <TableHead className="text-right">Shelf Space (cm)</TableHead>
                    <TableHead>Image</TableHead>
                    <TableHead>Created By</TableHead>
                    <TableHead>Modified Date</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {Array.isArray(setups) && setups.map((setup, index) => (
                    <TableRow key={setup.uid || setup.UID || `setup-${index}`}>
                      <TableCell>
                        <Checkbox
                          checked={selectedSetups.includes(setup.uid || setup.UID || '')}
                          onCheckedChange={(checked) => 
                            handleSelectOne(setup.uid || setup.UID || '', checked as boolean)
                          }
                        />
                      </TableCell>
                      <TableCell className="font-medium">
                        <Badge variant="outline">{setup.CategoryCode || setup.categoryCode}</Badge>
                      </TableCell>
                      <TableCell>{setup.SelectionType || setup.selectionType}</TableCell>
                      <TableCell>{setup.SelectionValue || setup.selectionValue}</TableCell>
                      <TableCell className="text-right">{setup.ShareOfShelfCm || setup.shareOfShelfCm || 0}</TableCell>
                      <TableCell>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-auto p-2 gap-2"
                          onClick={() => handleViewImages(setup)}
                        >
                          <ImageIcon className="h-4 w-4 text-muted-foreground" />
                          <span className="text-sm text-muted-foreground">View Images</span>
                        </Button>
                      </TableCell>
                      <TableCell>{setup.CreatedBy || setup.createdBy || 'System'}</TableCell>
                      <TableCell>
                        {(setup.ModifiedTime || setup.modifiedTime)
                          ? new Date(setup.ModifiedTime || setup.modifiedTime).toLocaleDateString()
                          : '-'
                        }
                      </TableCell>
                      <TableCell className="text-right">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <span className="sr-only">Open menu</span>
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem onClick={() => handleEdit(setup)}>
                              <Edit className="mr-2 h-4 w-4" />
                              Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => copyToClipboard(setup.uid || setup.UID || '')}>
                              <Copy className="mr-2 h-4 w-4" />
                              Copy UID
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem
                              className="text-destructive"
                              onClick={() => handleDelete(setup)}
                            >
                              <Trash2 className="mr-2 h-4 w-4" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {Array.isArray(setups) && setups.map((setup, index) => (
                <Card key={setup.uid || setup.UID || `setup-grid-${index}`} className="relative">
                  <div className="absolute top-2 right-2">
                    <Checkbox
                      checked={selectedSetups.includes(setup.uid || setup.UID || '')}
                      onCheckedChange={(checked) => 
                        handleSelectOne(setup.uid || setup.UID || '', checked as boolean)
                      }
                    />
                  </div>
                  <CardHeader>
                    <CardTitle className="text-lg">
                      <Badge>{setup.CategoryCode || setup.categoryCode}</Badge>
                    </CardTitle>
                    <CardDescription>{setup.SelectionType || setup.selectionType}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">Selection Value:</span>
                        <span className="text-sm font-medium">{setup.SelectionValue || setup.selectionValue}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">Shelf Space:</span>
                        <span className="text-sm font-medium">{setup.ShareOfShelfCm || setup.shareOfShelfCm} cm</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">Created By:</span>
                        <span className="text-sm font-medium">{setup.CreatedBy || setup.createdBy || 'System'}</span>
                      </div>
                    </div>
                    <div className="mt-4 flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        className="flex-1"
                        onClick={() => handleEdit(setup)}
                      >
                        <Edit className="mr-2 h-3 w-3" />
                        Edit
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        className="flex-1"
                        onClick={() => handleDelete(setup)}
                      >
                        <Trash2 className="mr-2 h-3 w-3" />
                        Delete
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* Pagination */}
          {!loading && totalPages > 1 && (
            <div className="mt-6 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage(1)}
                  disabled={currentPage === 1}
                >
                  <ChevronsLeft className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-sm">
                  Page {currentPage} of {totalPages}
                </span>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage(totalPages)}
                  disabled={currentPage === totalPages}
                >
                  <ChevronsRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

                onValueChange={(value) => setFormData({ ...formData, selectionType: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Category">Category</SelectItem>
                  <SelectItem value="Brand">Brand</SelectItem>
                  <SelectItem value="Product">Product</SelectItem>
                  <SelectItem value="Custom">Custom</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="selectionValue">Selection Value *</Label>
              <Input
                id="selectionValue"
                value={formData.selectionValue}
                onChange={(e) => setFormData({ ...formData, selectionValue: e.target.value })}
                placeholder="Enter selection value"
              />
              {formErrors.selectionValue && (
                <p className="text-sm text-destructive">{formErrors.selectionValue}</p>
              )}
            </div>
            <div className="grid gap-2">
              <Label htmlFor="shareOfShelfCm">Shelf Space (cm)</Label>
              <Input
                id="shareOfShelfCm"
                type="number"
                value={formData.shareOfShelfCm}
                onChange={(e) => setFormData({ ...formData, shareOfShelfCm: parseFloat(e.target.value) })}
                placeholder="Enter shelf space in cm"
              />
              {formErrors.shareOfShelfCm && (
                <p className="text-sm text-destructive">{formErrors.shareOfShelfCm}</p>
              )}
            </div>
            
            {/* Image Upload Section */}
            <div className="grid gap-2">
              <Label>Planogram Image (Optional)</Label>
              <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-4">
                {imagePreview ? (
                  <div className="space-y-2">
                    <div className="relative">
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="w-full h-32 object-cover rounded"
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="icon"
                        className="absolute top-1 right-1 h-6 w-6"
                        onClick={clearImageSelection}
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {selectedImage?.name} ({Math.round((selectedImage?.size || 0) / 1024)} KB)
                    </p>
                  </div>
                ) : (
                  <div className="text-center">
                    <Upload className="mx-auto h-8 w-8 text-muted-foreground" />
                    <div className="mt-2">
                      <label htmlFor="image-upload-create" className="cursor-pointer">
                        <span className="text-sm font-medium text-primary hover:text-primary/80">
                          Click to upload
                        </span>
                        <span className="text-sm text-muted-foreground"> or drag and drop</span>
                      </label>
                      <input
                        id="image-upload-create"
                        type="file"
                        accept="image/*"
                        onChange={handleImageSelect}
                        className="hidden"
                      />
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">
                      PNG, JPG, GIF up to 5MB
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Edit Planogram Setup</DialogTitle>
            <DialogDescription>
              Update planogram configuration details
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="edit-categoryCode">Category Code *</Label>
              <Input
                id="edit-categoryCode"
                value={formData.categoryCode}
                onChange={(e) => setFormData({ ...formData, categoryCode: e.target.value })}
                placeholder="Enter category code"
              />
              {formErrors.categoryCode && (
                <p className="text-sm text-destructive">{formErrors.categoryCode}</p>
              )}
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-selectionType">Selection Type</Label>
              <Select
                value={formData.selectionType}
                onValueChange={(value) => setFormData({ ...formData, selectionType: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Category">Category</SelectItem>
                  <SelectItem value="Brand">Brand</SelectItem>
                  <SelectItem value="Product">Product</SelectItem>
                  <SelectItem value="Custom">Custom</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-selectionValue">Selection Value *</Label>
              <Input
                id="edit-selectionValue"
                value={formData.selectionValue}
                onChange={(e) => setFormData({ ...formData, selectionValue: e.target.value })}
                placeholder="Enter selection value"
              />
              {formErrors.selectionValue && (
                <p className="text-sm text-destructive">{formErrors.selectionValue}</p>
              )}
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-shareOfShelfCm">Shelf Space (cm)</Label>
              <Input
                id="edit-shareOfShelfCm"
                type="number"
                value={formData.shareOfShelfCm}
                onChange={(e) => setFormData({ ...formData, shareOfShelfCm: parseFloat(e.target.value) })}
                placeholder="Enter shelf space in cm"
              />
              {formErrors.shareOfShelfCm && (
                <p className="text-sm text-destructive">{formErrors.shareOfShelfCm}</p>
              )}
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={submitEdit}>Update</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete the planogram setup for category "{selectedSetup?.categoryCode}".
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={confirmDelete} className="bg-destructive text-destructive-foreground">
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Bulk Delete Confirmation Dialog */}
      <AlertDialog open={isBulkDeleteDialogOpen} onOpenChange={setIsBulkDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete {selectedSetups.length} selected planogram setup(s).
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={confirmBulkDelete} className="bg-destructive text-destructive-foreground">
              Delete All
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Image Management Dialog */}
      <Dialog open={isImageDialogOpen} onOpenChange={setIsImageDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Manage Images - {selectedSetup?.categoryCode}</DialogTitle>
            <DialogDescription>
              Upload and manage images for this planogram setup
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="upload" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="upload">Upload New Image</TabsTrigger>
              <TabsTrigger value="gallery">Existing Images ({planogramImages.length})</TabsTrigger>
            </TabsList>
            
            <TabsContent value="upload" className="space-y-4">
              <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6">
                {imagePreview ? (
                  <div className="space-y-4">
                    <div className="relative">
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="w-full h-48 object-cover rounded"
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="icon"
                        className="absolute top-2 right-2 h-8 w-8"
                        onClick={clearImageSelection}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-medium">{selectedImage?.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {Math.round((selectedImage?.size || 0) / 1024)} KB
                        </p>
                      </div>
                      <Button 
                        onClick={() => {
                          console.log("=== UPLOAD BUTTON CLICKED ===");
                          console.log("selectedSetup:", selectedSetup);
                          console.log("selectedSetup?.uid:", selectedSetup?.uid);
                          console.log("selectedSetup?.UID:", (selectedSetup as any)?.UID);
                          
                          const planogramId = selectedSetup?.UID || selectedSetup?.uid;
                          console.log("planogramId to use:", planogramId);
                          
                          if (planogramId) {
                            handleImageUpload(planogramId);
                          } else {
                            console.error("No planogram ID available! selectedSetup:", selectedSetup);
                          }
                        }}
                        disabled={uploadingImage}
                      >
                        {uploadingImage ? 'Uploading...' : 'Upload Image'}
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center">
                    <Upload className="mx-auto h-12 w-12 text-muted-foreground" />
                    <div className="mt-4">
                      <label htmlFor="image-upload-dialog" className="cursor-pointer">
                        <span className="text-lg font-medium text-primary hover:text-primary/80">
                          Click to upload
                        </span>
                        <span className="text-muted-foreground"> or drag and drop</span>
                      </label>
                      <input
                        id="image-upload-dialog"
                        type="file"
                        accept="image/*"
                        onChange={handleImageSelect}
                        className="hidden"
                      />
                    </div>
                    <p className="text-sm text-muted-foreground mt-2">
                      PNG, JPG, GIF up to 5MB
                    </p>
                  </div>
                )}
              </div>
            </TabsContent>
            
            <TabsContent value="gallery" className="space-y-4">
              {planogramImages.length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {planogramImages.map((image) => (
                    <Card key={image.UID} className="overflow-hidden">
                      <div className="aspect-square relative">
                        <img
                          src={(() => {
                            // Generate image URL from RelativePath
                            if (image.RelativePath) {
                              const baseUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000/api";
                              const staticUrl = baseUrl.replace("/api", "");
                              let imagePath = image.RelativePath;
                              if (imagePath.startsWith("Data/")) {
                                imagePath = imagePath.replace("Data/", "/data/");
                              } else if (!imagePath.startsWith("/data/")) {
                                imagePath = `/data/${imagePath}`;
                              }
                              return `${staticUrl}${imagePath}`;
                            }
                            return '/placeholder-product.png';
                          })()}
                          alt={image.DisplayName}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.currentTarget.src = '/placeholder-product.png';
                          }}
                        />
                        <Button
                          variant="destructive"
                          size="icon"
                          className="absolute top-2 right-2 h-6 w-6"
                          onClick={() => {
                            const setupId = selectedSetup?.UID || selectedSetup?.uid;
                            if (setupId) handleImageDelete(image.UID, setupId);
                          }}
                        >
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                      <CardContent className="p-2">
                        <p className="text-xs text-muted-foreground truncate">
                          {image.DisplayName}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {Math.round(image.FileSize / 1024)} KB
                        </p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <ImageIcon className="mx-auto h-12 w-12 text-muted-foreground" />
                  <p className="mt-2 text-muted-foreground">No images uploaded yet</p>
                  <p className="text-sm text-muted-foreground">
                    Upload your first image using the Upload tab
                  </p>
                </div>
              )}
            </TabsContent>
          </Tabs>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsImageDialogOpen(false)}>
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}